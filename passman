#!/usr/bin/python3

import base64
import getopt
import getpass
import hashlib #sha256, pdkdf2_hmac.
import os
import os.path
import pathlib
import pyperclip as pc
import readline
import sqlite3 as db
import sys
import time

from cryptography.fernet import Fernet
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

PAUSE_TIME = 5


#Defines a decorator to control db access - provides a cursor to use, and closes data after function.
#Cursor sent to last non-kwarg parameter.
def provide_database_cursor(function):
    def wrapper(*args, **kwargs):
        data = get_db_connection()
        data.row_factory = db.Row #this allows accessing data in rows as if row is a dict.
        cursor = data.cursor()
        return_value = function(*args, cursor, **kwargs)
        data.commit()
        data.close()
        return return_value
    return wrapper
        

def get_db_connection():
    pathvar = pathlib.Path().home()
    pathvar = pathlib.Path(pathvar/'.passman')
    
    if not pathvar.exists():
        pathvar.mkdir()
        init_database()
        return 

    if not os.path.isfile(str(pathvar)+'/pass.db'):
        init_database()
        return

    return db.connect(str(pathvar)+'/pass.db', timeout=10)


def init_database():
    pathvar = pathlib.Path().home()
    pathvar = pathlib.Path(pathvar/'.passman')
    data = db.connect(str(pathvar)+'/pass.db')

    cursor = data.cursor()
    cursor.execute("create table logins (account text, username text, password text)")

    master_password = getpass.getpass("Enter a master password for the database (Ensure it is strong, 10+ characters): ")
    verification = getpass.getpass("Again for verification: ")

    if master_password != verification:
        print("Password did not match verification, aborting")
        sys.exit(2)

    #store hash of password in table for authenticating the user
    values = {}
    values['account'] = "master_password"
    values['salt'] = os.urandom(64)
    values['password'] = hashlib.pbkdf2_hmac('sha256', master_password.encode('UTF-8'),
                                             values['salt'], 256000)

    cursor.execute("create table hidden (password text)")
    cursor.execute("insert into hidden values (:password)", values)

    cursor.execute("create table salts (account text, username text, salt blob)")
    cursor.execute("insert into salts values (:account, null, :salt)", values)

    data.commit()
    data.close()

    print("Database created")
    exit(0)


@provide_database_cursor
def get_salt(account, cursor, user=None):
    if user:
        cursor.execute("select salt from salts where account=? and username=?", (account, user,))
    else:
        cursor.execute("select salt from salts where account=?", (account,))

    row = cursor.fetchone()

    return row['salt']


def encrypt_password(master_password, password):
    salt = os.urandom(64)

    kdf = PBKDF2HMAC(
        algorithm = hashes.SHA256(),
        length = 32,
        salt = salt,
        iterations = 256000,
        backend = default_backend())

    key = base64.urlsafe_b64encode(kdf.derive(master_password.encode('UTF-8')))
    f = Fernet(key)
    encrypted_password = f.encrypt(password.encode('UTF-8'))
    
    return encrypted_password, salt
    

@provide_database_cursor
def decrypt_password(account, master_password, cursor, user=None):
    if user:
        cursor.execute("select password from logins where account=? and username=?", (account, user,))
    else:
        cursor.execute("select password from logins where account=?", (account,))

    row = cursor.fetchone()
    if row is None:
        print("No password found for account {}, username {}".format(account, user))
        exit(2)
        
    kdf = PBKDF2HMAC(
        algorithm = hashes.SHA256(),
        length = 32,
        salt = get_salt(account,user=user),
        iterations = 256000,
        backend = default_backend())

    key = base64.urlsafe_b64encode(kdf.derive(master_password.encode('UTF-8')))
    f = Fernet(key)
    password = f.decrypt(row['password']).decode('UTF-8')

    return password


def get_password(account, master_password, user=None):
    if user:
        password = decrypt_password(account, master_password, user)
    else:
        password = decrypt_password(account, master_password)

    pc.copy(password)
    print("Password for {} now in clipboard".format(account))
    time.sleep(PAUSE_TIME)
    pc.copy("VOID")

        
@provide_database_cursor
def get_username(account, cursor):
    cursor.execute("select username from logins where account=?", (account,))
    row = cursor.fetchone()
    pc.copy(row['username'])
    print("Username for {} now in clipboard".format(account))
    time.sleep(PAUSE_TIME)
    pc.copy("VOID")
    return


@provide_database_cursor
def add_new_record(master_password, cursor):
    record = {}
    record['account'] = input("Account: ")
    record['username'] = input("Username: ")

    password = getpass.getpass()
    password2 = getpass.getpass('Verify password:')

    if password != password2:
        print("ERROR: Password and Validation did not match")
        return
    
    record['password'], record['salt'] = encrypt_password(master_password, password)
    
    cursor.execute("insert into logins values (:account, :username, :password)", record)
    cursor.execute("insert into salts values (:account, :username, :salt)", record)

    print("Database updated - Added account {}".format(record['account']))


@provide_database_cursor
def delete_record(account, cursor, user=None):
    if user:
        confirmation = input("Confirm deletion of user {} for account type {} (y/n): ".format(user, account))
        if confirmation == 'y':
            cursor.execute("delete from logins where account=? and user=?", (account,user,))
            cursor.execute("delete from salts where account=? and user=?", (account,user,))
            print("Database updated - Deleted user {} from account type {}".format(user,account))
            return
        else:
            print("Deletion aborted")
            return

    confirmation = input("Confirm deletion of account {} (y/n): ".format(account))

    cursor.execute("select * from logins where account=?", (account,))
    rows = cursor.fetchall()
    
    if len(rows)>1:
        print("Found multiple usernames associated to this account type")
        users = [row['username'] for row in rows]
        for user in users:
            delete_record(account, user=user)
        return

    if confirmation == 'y':
        cursor.execute("delete from logins where account=?", (account,))
        cursor.execute("delete from salts where account=?", (account,))
        print("Database updated - Deleted account {}".format(account))
        return
    else:
        print("Deletion aborted")
        return

    
@provide_database_cursor
def list_accounts(cursor):
    rows = cursor.execute("select distinct account from logins").fetchall()
    for row in rows:
        usernames = cursor.execute("select username from logins where account=?", (row['account'],)).fetchall()
        account_string = row['account']+':  ' 
        for names in usernames:
            account_string += names['username']
            account_string += ', '
        print(account_string+'\n')
    

def check_args(args, n):
    if len(args) > n:
        print("ERROR: Too many args")
        usage()
        sys.exit(2)
    elif len(args) < n:
        print("ERROR: Too few args")
        usage()
        sys.exit(2)


@provide_database_cursor
def authenticate_user(cursor):
    user_pass = getpass.getpass("Enter master password: ")

    cursor.execute("select salt from salts where account='master_password'")
    salt = cursor.fetchone()['salt']

    cursor.execute("select password from hidden")
    hashed_master = cursor.fetchone()['password']

    #if hash of user input is not the same as hash in database
    if hashlib.pbkdf2_hmac('sha256',
                           user_pass.encode('UTF-8'),
                           salt,
                           256000) != hashed_master:
        print("Wrong password")
        sys.exit(2)

    return user_pass
    
        
@provide_database_cursor
def get_login(account, master_password, cursor, user=None):
    if user:
        pc.copy(user)
    else:
        cursor.execute("select username from logins where account=?", (account,))
        rows = cursor.fetchall()

        if len(rows) == 0:
            print("No logins associated with {}".format(account))
            exit(0)

        elif len(rows) == 1: #if unique username for account type.
            pc.copy(rows[0]['username'])

        else:
            usernames = [row['username'] for row in rows]
            
            #Create tab completion of the possible usernames
            def completer(text, state):
                options = [i for i in usernames if i.startswith(text)]
                if state<len(options):
                    return options[state]
                else:
                    return None
                
            readline.parse_and_bind("tab: complete")
            readline.set_completer(completer)

            print("Non-unique username for this account type! Specify which username to use")
            print("Usernames found:")
            
            for user in usernames:
                print("\t"+user)
                
            user = input("Selection (tab to autocomplete): ")
            if user not in usernames:
                print("Not an option - quitting")
                sys.exit(2)
                
            pc.copy(user)

    password = decrypt_password(account, master_password, user=user) if user else decrypt_password(account, master_password)

    input("Username for {} in clipboard. Press Enter for password...".format(account))

    pc.copy(password)
    print("Password for {} in clipboard. Clipboard will expire in {} seconds.".format(account, PAUSE_TIME))
    time.sleep(PAUSE_TIME)
    pc.copy("VOID")
    

@provide_database_cursor
def update_password(account, master_password, new_password, cursor, user=None):
    if user:
        print("updating record for account {}, user {}...".format(account,user))
    else:
        print("updating record for account {}...".format(account))

    encrypted_password, salt = encrypt_password(master_password, new_password)

    row = {'password' : encrypted_password, 
           'account' : account,
           'username' : user,
           'salt' : salt}

    if user:
        cursor.execute("update logins set password=(:password) where account=(:account) and username=(:username)", row)
        cursor.execute("update salts set salt=(:salt) where account=(:account) and username=(:username)", row)
    else:
        cursor.execute("update logins set password=(:password) where account=(:account)", row)
        cursor.execute("update salts set salt=(:salt) where account=(:account)", row)
    print("done")
    
    
@provide_database_cursor
def change_master_password(master_password, cursor):
    new_password = getpass.getpass("Enter new master password: ")
    verification = getpass.getpass("Enter again: ")

    if new_password != verification:
        print("Passwords do not match! Aborting")
        sys.exit(0)

    salt = os.urandom(64)
    data = {'salt' : salt,
            'new_pass_hashed' : hashlib.pbkdf2_hmac('sha256',
                                                    new_password.encode('UTF-8'),
                                                    salt,
                                                    256000)}

    #update hash and salt to those for new password
    cursor.execute("update hidden set password=(:new_pass_hashed)", data)
    cursor.execute("update salts set salt=(:salt) where account='master_password'", data)
    cursor.connection.commit() #without this, get db locked error. Commits needed between functions with transactions
    
    #update all passwords in db to use new master_password as key
    cursor.execute("select * from logins")
    rows = cursor.fetchall()
    for row in rows:
        update_password(row['account'],
                        new_password,
                        decrypt_password(row['account'], master_password),
                        user = row['username'])
        #this is going to need to pick out the users so that they decrypt with the correct salt,
        #lest we get invalid token/signature did not match digest errors!


def usage():
    print("to be written later")
    

def parse_args():
    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   "l:p:u:d:U:",
                                   ["login=",
                                    "password=",
                                    "username=",
                                    "list",
                                    "delete=",
                                    "update=",
                                    "change-master"])
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)

    master_password = authenticate_user()

    if len(opts) == 0:
        check_args(args,1)
        if args[0] == "add":
            add_new_record(master_password)
            exit(0)
        else:
            get_login(args[0], master_password)
            exit(0)

    for opt, arg in opts: #really there should only be one opt!
        if opt in ("-l", "--login"):
            get_login(arg, master_password)
            exit(0)

        if opt in ("-u", "--username"):
            if len(args) == 0:
                print("No account type provided")
                exit(2)
            get_login(args[0], master_password, user=arg)
            print("Clipboard expired")
            exit(0)

        if opt in ("-p", "--password"):
            get_password(arg, master_password)
            print("Clipboard expired")
            exit(0)

        if opt in ("-d", "--delete"):
            delete_record(arg)
            exit(0)

        if opt in ("--list"):
            list_accounts()
            exit(0)

        if opt in ("-U", "--update"):
            #get new password.
            #handle user somehow.
            update_password(arg, master_password)
            exit(0)

        if opt in ("--change-master"):
            change_master_password(master_password)
            print("Master password updated.")
            exit(0)

if __name__ == "__main__":
    parse_args()
